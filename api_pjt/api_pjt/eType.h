#pragma once
enum eType_MouseCursor
{
	TYPE_WAIT = 0,
	TYPE_CROSS,
	TYPE_ARROW,
	TYPE_CURSOR_END,
};

enum eTYPE_GDI
{
	TYPE_EMPTY,
	TYPE_GDI_END,
};
enum eTYPE_WATCH
{
	TYPE_FRONT,
	TYPE_LEFT,
	TYPE_RIGHT,
	TYPE_BACK,
	TYPE_WATCH_END,
};

enum eTYPE_STATUS
{
	eHP,
	eMP,
	eAF,
	eDF,
	eSTATUS_END,
};

enum eTYPE_KEY_TYPE
{
	TYPE_DOWN_KEY,
	TYPE_LEFT_KEY,
	TYPE_RIGHT_KEY,
	TYPE_UP_KEY,
	TYPE_END_KEY,
};

enum eTYPE_ANI
{
	TYPE_IDLE,
	TYPE_WALK,
	TYPE_PA,
	TYPE_KAME,
	TYPE_SSJ,
	TYPE_NOMAL,
	TYPE_ATTACK,
	TYPE_GARD,
	TYPE_MOVE_END,
};

enum eTYPE_EVENT
{
	TYPE_EVENT_ONE,
	TYPE_EVENT_END,
};

enum eTYPE_MAP
{
	TYPE_MAP1,
	TYPE_MAP2,
	TYPE_MAP3,

	TYPE_MAP_END,
};

enum eTYPE_TITLE_BUTTON
{
	TYPE_BUTTON_START = 100,
	TYPE_BUTTON_BACK,
	TYPE_BUTTON_EXIT,
	TYPE_BUTTON_END,
};

enum eTYPE_TITLE
{
	TYPE_TITLE_START,
	TYPE_TITLE_CLEAR,
	TYPE_TITLE_OVER,
	TYPE_TITLE_END
};
enum eTYPE_OBJECT
{
	TYPE_OBJ_ARROW,
	TYPE_END,
};

enum eTYPE_PLAYER
{
	TYPE_Player1,
	TYPE_Player2,
	TYPE_Player3,
	TYPE_Player4,
	TYPE_PLAYER_END,
};

enum eTYPE_MONSTER
{
	TYPE_MINION,
	TYPE_BOSS_MAJINBUU,
	TYPE_MONSTER_END,
};

enum eTYPE_CHARACTER
{
	TYPE_CHARACTER_NONE,
	TYPE_PLAYER,
	TYPE_MONSTER,
	TYPE_NPC,
	TYPE_PET,
	TYPE_CHARACTER_END,
};
