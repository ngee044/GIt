// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "hwpctrl.h"

/////////////////////////////////////////////////////////////////////////////
// CHwpCtrl

IMPLEMENT_DYNCREATE(CHwpCtrl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CHwpCtrl properties

LPDISPATCH CHwpCtrl::GetCellShape()
{
	LPDISPATCH result;
	GetProperty(0x1, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetCellShape(LPDISPATCH propVal)
{
	SetProperty(0x1, VT_DISPATCH, propVal);
}

LPDISPATCH CHwpCtrl::GetCharShape()
{
	LPDISPATCH result;
	GetProperty(0x2, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetCharShape(LPDISPATCH propVal)
{
	SetProperty(0x2, VT_DISPATCH, propVal);
}

LPDISPATCH CHwpCtrl::GetHeadCtrl()
{
	LPDISPATCH result;
	GetProperty(0x3, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetHeadCtrl(LPDISPATCH propVal)
{
	SetProperty(0x3, VT_DISPATCH, propVal);
}

BOOL CHwpCtrl::GetIsEmpty()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CHwpCtrl::SetIsEmpty(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

short CHwpCtrl::GetIsModified()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CHwpCtrl::SetIsModified(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

LPDISPATCH CHwpCtrl::GetLastCtrl()
{
	LPDISPATCH result;
	GetProperty(0x6, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetLastCtrl(LPDISPATCH propVal)
{
	SetProperty(0x6, VT_DISPATCH, propVal);
}

long CHwpCtrl::GetPageCount()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CHwpCtrl::SetPageCount(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

LPDISPATCH CHwpCtrl::GetParaShape()
{
	LPDISPATCH result;
	GetProperty(0x8, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetParaShape(LPDISPATCH propVal)
{
	SetProperty(0x8, VT_DISPATCH, propVal);
}

LPDISPATCH CHwpCtrl::GetParentCtrl()
{
	LPDISPATCH result;
	GetProperty(0x9, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetParentCtrl(LPDISPATCH propVal)
{
	SetProperty(0x9, VT_DISPATCH, propVal);
}

CString CHwpCtrl::GetPath()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CHwpCtrl::SetPath(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

LPDISPATCH CHwpCtrl::GetViewProperties()
{
	LPDISPATCH result;
	GetProperty(0xb, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetViewProperties(LPDISPATCH propVal)
{
	SetProperty(0xb, VT_DISPATCH, propVal);
}

long CHwpCtrl::GetVersion()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CHwpCtrl::SetVersion(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CHwpCtrl::GetCurFieldState()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CHwpCtrl::SetCurFieldState(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

BOOL CHwpCtrl::GetReadOnlyMode()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CHwpCtrl::SetReadOnlyMode(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

short CHwpCtrl::GetSelectionMode()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}

void CHwpCtrl::SetSelectionMode(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}

long CHwpCtrl::GetEditMode()
{
	long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CHwpCtrl::SetEditMode(long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

BOOL CHwpCtrl::GetAutoShowHideToolBar()
{
	BOOL result;
	GetProperty(0x47, VT_BOOL, (void*)&result);
	return result;
}

void CHwpCtrl::SetAutoShowHideToolBar(BOOL propVal)
{
	SetProperty(0x47, VT_BOOL, propVal);
}

LPDISPATCH CHwpCtrl::GetEngineProperties()
{
	LPDISPATCH result;
	GetProperty(0x48, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetEngineProperties(LPDISPATCH propVal)
{
	SetProperty(0x48, VT_DISPATCH, propVal);
}

LPDISPATCH CHwpCtrl::GetScrollPosInfo()
{
	LPDISPATCH result;
	GetProperty(0x49, VT_DISPATCH, (void*)&result);
	return result;
}

void CHwpCtrl::SetScrollPosInfo(LPDISPATCH propVal)
{
	SetProperty(0x49, VT_DISPATCH, propVal);
}

long CHwpCtrl::GetHyperlinkMode()
{
	long result;
	GetProperty(0x4e, VT_I4, (void*)&result);
	return result;
}

void CHwpCtrl::SetHyperlinkMode(long propVal)
{
	SetProperty(0x4e, VT_I4, propVal);
}

BOOL CHwpCtrl::GetIsPreviewMode()
{
	BOOL result;
	GetProperty(0x79, VT_BOOL, (void*)&result);
	return result;
}

void CHwpCtrl::SetIsPreviewMode(BOOL propVal)
{
	SetProperty(0x79, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CHwpCtrl operations

void CHwpCtrl::Clear(const VARIANT& option)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 &option);
}

LPDISPATCH CHwpCtrl::CreateAction(LPCTSTR actid)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		actid);
	return result;
}

BOOL CHwpCtrl::CreatePageImage(LPCTSTR Path, const VARIANT& pgno, const VARIANT& resolution, const VARIANT& depth, const VARIANT& format)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Path, &pgno, &resolution, &depth, &format);
	return result;
}

LPDISPATCH CHwpCtrl::CreateSet(LPCTSTR setid)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		setid);
	return result;
}

BOOL CHwpCtrl::FieldExist(LPCTSTR field)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		field);
	return result;
}

CString CHwpCtrl::GetFieldList(const VARIANT& number, const VARIANT& option)
{
	CString result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		&number, &option);
	return result;
}

CString CHwpCtrl::GetFieldText(LPCTSTR fieldlist)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		fieldlist);
	return result;
}

BOOL CHwpCtrl::Insert(LPCTSTR Path, const VARIANT& format, const VARIANT& arg)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Path, &format, &arg);
	return result;
}

LPDISPATCH CHwpCtrl::InsertCtrl(LPCTSTR ctrlid, const VARIANT& initparam)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ctrlid, &initparam);
	return result;
}

BOOL CHwpCtrl::MoveToField(LPCTSTR field, const VARIANT& text, const VARIANT& start, const VARIANT& select)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		field, &text, &start, &select);
	return result;
}

BOOL CHwpCtrl::Open(LPCTSTR Path, const VARIANT& format, const VARIANT& arg)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Path, &format, &arg);
	return result;
}

void CHwpCtrl::PutFieldText(LPCTSTR fieldlist, LPCTSTR textlist)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 fieldlist, textlist);
}

void CHwpCtrl::RenameField(LPCTSTR oldname, LPCTSTR newname)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 oldname, newname);
}

void CHwpCtrl::Run(LPCTSTR actid)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 actid);
}

BOOL CHwpCtrl::Save(const VARIANT& save_if_dirty)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&save_if_dirty);
	return result;
}

BOOL CHwpCtrl::SaveAs(LPCTSTR Path, const VARIANT& format, const VARIANT& arg)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Path, &format, &arg);
	return result;
}

BOOL CHwpCtrl::OpenDocument(LPCTSTR szFileName, LPCTSTR szFileType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFileName, szFileType);
	return result;
}

BOOL CHwpCtrl::SaveDocument(LPCTSTR szFileName, LPCTSTR szFileType)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFileName, szFileType);
	return result;
}

BOOL CHwpCtrl::InsertDocument(LPCTSTR szFileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szFileName);
	return result;
}

BOOL CHwpCtrl::PrintDocument()
{
	BOOL result;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CHwpCtrl::SetToolBar(long lToolBarID, const VARIANT& varID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		lToolBarID, &varID);
	return result;
}

BOOL CHwpCtrl::ShowToolBar(long bShow)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		bShow);
	return result;
}

LPDISPATCH CHwpCtrl::InsertPicture(LPCTSTR Path, const VARIANT& embedded, const VARIANT& sizeOption, const VARIANT& reverse, const VARIANT& watermark, const VARIANT& effect, const VARIANT& width, const VARIANT& height)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Path, &embedded, &sizeOption, &reverse, &watermark, &effect, &width, &height);
	return result;
}

BOOL CHwpCtrl::CreateField(LPCTSTR direction, const VARIANT& memo, const VARIANT& name)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		direction, &memo, &name);
	return result;
}

void CHwpCtrl::SetClientName(LPCTSTR szClient)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 szClient);
}

BOOL CHwpCtrl::MovePos(const VARIANT& moveID, const VARIANT& para, const VARIANT& pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&moveID, &para, &pos);
	return result;
}

BOOL CHwpCtrl::SelectText(long spara, long spos, long epara, long epos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		spara, spos, epara, epos);
	return result;
}

CString CHwpCtrl::GetCurFieldName(const VARIANT& option)
{
	CString result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		&option);
	return result;
}

BOOL CHwpCtrl::SetCurFieldName(LPCTSTR fieldname, const VARIANT& option, const VARIANT& direction, const VARIANT& memo)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		fieldname, &option, &direction, &memo);
	return result;
}

BOOL CHwpCtrl::DeleteCtrl(LPDISPATCH ctrl)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ctrl);
	return result;
}

BOOL CHwpCtrl::InitScan(const VARIANT& option, const VARIANT& range, const VARIANT& spara, const VARIANT& spos, const VARIANT& epara, const VARIANT& epos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&option, &range, &spara, &spos, &epara, &epos);
	return result;
}

long CHwpCtrl::GetText(BSTR* text)
{
	long result;
	static BYTE parms[] =
		VTS_PBSTR;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		text);
	return result;
}

void CHwpCtrl::ReleaseScan()
{
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CHwpCtrl::LockCommand(LPCTSTR actionID, long lock)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 actionID, lock);
}

BOOL CHwpCtrl::IsCommandLock(LPCTSTR actionID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		actionID);
	return result;
}

BOOL CHwpCtrl::GetFilterList(BSTR* szfilterlist, const VARIANT& flags)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PBSTR VTS_VARIANT;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		szfilterlist, &flags);
	return result;
}

void CHwpCtrl::GetPos(long* list, long* para, long* pos)
{
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 list, para, pos);
}

BOOL CHwpCtrl::SetPos(long list, long para, long pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		list, para, pos);
	return result;
}

BOOL CHwpCtrl::KeyIndicator(long* seccnt, long* secno, long* prnpageno, long* colno, long* line, long* pos, short* over, BSTR* ctrlname)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI2 VTS_PBSTR;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		seccnt, secno, prnpageno, colno, line, pos, over, ctrlname);
	return result;
}

BOOL CHwpCtrl::GetActionCmdUIStatus(LPCTSTR actid, long bWithKey, long* bEnabled, long* bChecked, long* bRadio, BSTR* szText)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PBSTR;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		actid, bWithKey, bEnabled, bChecked, bRadio, szText);
	return result;
}

long CHwpCtrl::ModifyFieldProperties(LPCTSTR field, long remove, long add)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		field, remove, add);
	return result;
}

LPDISPATCH CHwpCtrl::GetPosBySet()
{
	LPDISPATCH result;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

BOOL CHwpCtrl::SetPosBySet(LPDISPATCH pos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		pos);
	return result;
}

long CHwpCtrl::GetTextBySet(LPDISPATCH text)
{
	long result;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		text);
	return result;
}

VARIANT CHwpCtrl::InsertBackgroundPicture(LPCTSTR bordertype, LPCTSTR Path, const VARIANT& embedded, const VARIANT& filloption, const VARIANT& watermark, const VARIANT& effect, const VARIANT& brightness, const VARIANT& contrast)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		bordertype, Path, &embedded, &filloption, &watermark, &effect, &brightness, &contrast);
	return result;
}

long CHwpCtrl::SetFieldViewOption(long option)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		option);
	return result;
}

VARIANT CHwpCtrl::GetTextFile(LPCTSTR format, LPCTSTR option)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		format, option);
	return result;
}

long CHwpCtrl::SetTextFile(const VARIANT& data, LPCTSTR format, LPCTSTR option)
{
	long result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BSTR VTS_BSTR;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		&data, format, option);
	return result;
}

LPDISPATCH CHwpCtrl::GetMousePos(long Xrelto, long Yrelto)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		Xrelto, Yrelto);
	return result;
}

BOOL CHwpCtrl::ShowStatusBar(long Show)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Show);
	return result;
}

LPDISPATCH CHwpCtrl::GetFileInfo(LPCTSTR FileName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		FileName);
	return result;
}

CString CHwpCtrl::SaveState(LPCTSTR FileName)
{
	CString result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CHwpCtrl::LoadState(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CHwpCtrl::ReplaceAction(LPCTSTR OldActionID, LPCTSTR NewActionID)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		OldActionID, NewActionID);
	return result;
}

LPDISPATCH CHwpCtrl::GetMessageSet()
{
	LPDISPATCH result;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

LPDISPATCH CHwpCtrl::GetViewStatus(long nType)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4b, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		nType);
	return result;
}

BOOL CHwpCtrl::RegisterModule(LPCTSTR ModuleType, const VARIANT& ModuleData)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x4c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ModuleType, &ModuleData);
	return result;
}

BOOL CHwpCtrl::MoveToFieldEx(LPCTSTR field, const VARIANT& text, const VARIANT& start, const VARIANT& select)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		field, &text, &start, &select);
	return result;
}

BOOL CHwpCtrl::SetAutoSave(LPCTSTR FileName, long saveinterval)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x3ad3, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, saveinterval);
	return result;
}

VARIANT CHwpCtrl::GetFormObjectAttr(LPCTSTR formname, LPCTSTR attrname)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x3ad4, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		formname, attrname);
	return result;
}

BOOL CHwpCtrl::SetFormObjectAttr(LPCTSTR formname, LPCTSTR attrname, const VARIANT& value)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x3ad5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		formname, attrname, &value);
	return result;
}

BOOL CHwpCtrl::PreviewCommand(long previewmode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3ad6, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		previewmode);
	return result;
}

BOOL CHwpCtrl::GetSelectedPos(long* slist, long* spara, long* spos, long* elist, long* epara, long* epos)
{
	BOOL result;
	static BYTE parms[] =
		VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4;
	InvokeHelper(0x3ad7, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		slist, spara, spos, elist, epara, epos);
	return result;
}

BOOL CHwpCtrl::GetSelectedPosBySet(LPDISPATCH sset, LPDISPATCH eset)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DISPATCH VTS_DISPATCH;
	InvokeHelper(0x3ad8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		sset, eset);
	return result;
}

void CHwpCtrl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
