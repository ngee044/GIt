#if !defined(AFX_HWPCTRL_H__DE2E4C3A_D4C3_42B3_BAEE_357BDEB45563__INCLUDED_)
#define AFX_HWPCTRL_H__DE2E4C3A_D4C3_42B3_BAEE_357BDEB45563__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CHwpCtrl wrapper class

class CHwpCtrl : public CWnd
{
protected:
	DECLARE_DYNCREATE(CHwpCtrl)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xbd9c32de, 0x3155, 0x4691, { 0x89, 0x72, 0x9, 0x7d, 0x53, 0xb1, 0x0, 0x52 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	LPDISPATCH GetCellShape();
	void SetCellShape(LPDISPATCH);
	LPDISPATCH GetCharShape();
	void SetCharShape(LPDISPATCH);
	LPDISPATCH GetHeadCtrl();
	void SetHeadCtrl(LPDISPATCH);
	BOOL GetIsEmpty();
	void SetIsEmpty(BOOL);
	short GetIsModified();
	void SetIsModified(short);
	LPDISPATCH GetLastCtrl();
	void SetLastCtrl(LPDISPATCH);
	long GetPageCount();
	void SetPageCount(long);
	LPDISPATCH GetParaShape();
	void SetParaShape(LPDISPATCH);
	LPDISPATCH GetParentCtrl();
	void SetParentCtrl(LPDISPATCH);
	CString GetPath();
	void SetPath(LPCTSTR);
	LPDISPATCH GetViewProperties();
	void SetViewProperties(LPDISPATCH);
	long GetVersion();
	void SetVersion(long);
	long GetCurFieldState();
	void SetCurFieldState(long);
	BOOL GetReadOnlyMode();
	void SetReadOnlyMode(BOOL);
	short GetSelectionMode();
	void SetSelectionMode(short);
	long GetEditMode();
	void SetEditMode(long);
	BOOL GetAutoShowHideToolBar();
	void SetAutoShowHideToolBar(BOOL);
	LPDISPATCH GetEngineProperties();
	void SetEngineProperties(LPDISPATCH);
	LPDISPATCH GetScrollPosInfo();
	void SetScrollPosInfo(LPDISPATCH);
	long GetHyperlinkMode();
	void SetHyperlinkMode(long);
	BOOL GetIsPreviewMode();
	void SetIsPreviewMode(BOOL);

// Operations
public:
	void Clear(const VARIANT& option);
	LPDISPATCH CreateAction(LPCTSTR actid);
	BOOL CreatePageImage(LPCTSTR Path, const VARIANT& pgno, const VARIANT& resolution, const VARIANT& depth, const VARIANT& format);
	LPDISPATCH CreateSet(LPCTSTR setid);
	BOOL FieldExist(LPCTSTR field);
	CString GetFieldList(const VARIANT& number, const VARIANT& option);
	CString GetFieldText(LPCTSTR fieldlist);
	BOOL Insert(LPCTSTR Path, const VARIANT& format, const VARIANT& arg);
	LPDISPATCH InsertCtrl(LPCTSTR ctrlid, const VARIANT& initparam);
	BOOL MoveToField(LPCTSTR field, const VARIANT& text, const VARIANT& start, const VARIANT& select);
	BOOL Open(LPCTSTR Path, const VARIANT& format, const VARIANT& arg);
	void PutFieldText(LPCTSTR fieldlist, LPCTSTR textlist);
	void RenameField(LPCTSTR oldname, LPCTSTR newname);
	void Run(LPCTSTR actid);
	BOOL Save(const VARIANT& save_if_dirty);
	BOOL SaveAs(LPCTSTR Path, const VARIANT& format, const VARIANT& arg);
	BOOL OpenDocument(LPCTSTR szFileName, LPCTSTR szFileType);
	BOOL SaveDocument(LPCTSTR szFileName, LPCTSTR szFileType);
	BOOL InsertDocument(LPCTSTR szFileName);
	BOOL PrintDocument();
	BOOL SetToolBar(long lToolBarID, const VARIANT& varID);
	BOOL ShowToolBar(long bShow);
	LPDISPATCH InsertPicture(LPCTSTR Path, const VARIANT& embedded, const VARIANT& sizeOption, const VARIANT& reverse, const VARIANT& watermark, const VARIANT& effect, const VARIANT& width, const VARIANT& height);
	BOOL CreateField(LPCTSTR direction, const VARIANT& memo, const VARIANT& name);
	void SetClientName(LPCTSTR szClient);
	BOOL MovePos(const VARIANT& moveID, const VARIANT& para, const VARIANT& pos);
	BOOL SelectText(long spara, long spos, long epara, long epos);
	CString GetCurFieldName(const VARIANT& option);
	BOOL SetCurFieldName(LPCTSTR fieldname, const VARIANT& option, const VARIANT& direction, const VARIANT& memo);
	BOOL DeleteCtrl(LPDISPATCH ctrl);
	BOOL InitScan(const VARIANT& option, const VARIANT& range, const VARIANT& spara, const VARIANT& spos, const VARIANT& epara, const VARIANT& epos);
	long GetText(BSTR* text);
	void ReleaseScan();
	void LockCommand(LPCTSTR actionID, long lock);
	BOOL IsCommandLock(LPCTSTR actionID);
	BOOL GetFilterList(BSTR* szfilterlist, const VARIANT& flags);
	void GetPos(long* list, long* para, long* pos);
	BOOL SetPos(long list, long para, long pos);
	BOOL KeyIndicator(long* seccnt, long* secno, long* prnpageno, long* colno, long* line, long* pos, short* over, BSTR* ctrlname);
	BOOL GetActionCmdUIStatus(LPCTSTR actid, long bWithKey, long* bEnabled, long* bChecked, long* bRadio, BSTR* szText);
	long ModifyFieldProperties(LPCTSTR field, long remove, long add);
	LPDISPATCH GetPosBySet();
	BOOL SetPosBySet(LPDISPATCH pos);
	long GetTextBySet(LPDISPATCH text);
	VARIANT InsertBackgroundPicture(LPCTSTR bordertype, LPCTSTR Path, const VARIANT& embedded, const VARIANT& filloption, const VARIANT& watermark, const VARIANT& effect, const VARIANT& brightness, const VARIANT& contrast);
	long SetFieldViewOption(long option);
	VARIANT GetTextFile(LPCTSTR format, LPCTSTR option);
	long SetTextFile(const VARIANT& data, LPCTSTR format, LPCTSTR option);
	LPDISPATCH GetMousePos(long Xrelto, long Yrelto);
	BOOL ShowStatusBar(long Show);
	LPDISPATCH GetFileInfo(LPCTSTR FileName);
	CString SaveState(LPCTSTR FileName);
	BOOL LoadState(LPCTSTR FileName);
	BOOL ReplaceAction(LPCTSTR OldActionID, LPCTSTR NewActionID);
	LPDISPATCH GetMessageSet();
	LPDISPATCH GetViewStatus(long nType);
	BOOL RegisterModule(LPCTSTR ModuleType, const VARIANT& ModuleData);
	BOOL MoveToFieldEx(LPCTSTR field, const VARIANT& text, const VARIANT& start, const VARIANT& select);
	BOOL SetAutoSave(LPCTSTR FileName, long saveinterval);
	VARIANT GetFormObjectAttr(LPCTSTR formname, LPCTSTR attrname);
	BOOL SetFormObjectAttr(LPCTSTR formname, LPCTSTR attrname, const VARIANT& value);
	BOOL PreviewCommand(long previewmode);
	BOOL GetSelectedPos(long* slist, long* spara, long* spos, long* elist, long* epara, long* epos);
	BOOL GetSelectedPosBySet(LPDISPATCH sset, LPDISPATCH eset);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_HWPCTRL_H__DE2E4C3A_D4C3_42B3_BAEE_357BDEB45563__INCLUDED_)
